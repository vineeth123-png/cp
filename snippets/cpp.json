{
	"hello world": {
		"prefix": "hello, world",
		"body": [
			"#include<iostream>",
			"using namespace std;\n",
			"int main(){",
			"\tcout<<\"hello, world\"<<\"\\n\";",
			"\treturn 0;",
			"}"
		]
	},
	"boilerplate": {
		"prefix": "boilerplate code",
		"body": [
			"#include<bits/stdc++.h>",
			"#define int long long",
			"using namespace std;",
			"#define PII pair<int, int>",
			"#define pub push_back",
			"#define puf push_front",
			"#define F first",
			"#define S second",
			"#define ld long double",
			"#define fastIO ios::sync_with_stdio(0); cin.tie(0);",
			"vector<int> dx = {-1, 1, 0, 0};",
			"vector<int> dy = {0, 0, -1, 1};",
			"const int inf = 0x3f3f3f3f;",
			"int n, m;",
			"// Fill these!",
			"bool isValid(int i, int j) {return i>=0 && i<n && j>=0 && j<n;}",
			"int modpow(int a, int b, int mod) {",
			"\tif(a == 0) return 0;",
			"\telse if(a == 1 || b == 0) return 1;",
			"\tint x = modpow(a, b/2, mod);",
			"\tif(b % 2 == 0) {",
			"\t\tx = (x*x)%mod;",
			"\t}else {",
			"\t\tx = (x*x)%mod;",
			"\t\tx = (x*a)%mod;",
			"\t}",
			"\treturn x;",
			"}",
			"int32_t main(){",
			"\t//fastIO",
			"\t/*freopen(\"input.txt\", \"r\", stdin);",
			"\tfreopen(\"output.txt\", \"w\", stdout);*/",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "Boilerplate code to avoid redundancy"
	},
	"boilerplate-testcases":{
		"prefix": "boilerplate-testcases",
		"body": [
			"#include<bits/stdc++.h>",
			"#define int long long",
			"using namespace std;",
			"#define PII pair<int, int>",
			"#define pub push_back",
			"#define puf push_front",
			"#define F first",
			"#define S second",
			"#define ld long double",
			"#define fastIO ios::sync_with_stdio(0); cin.tie(0);",
			"vector<int> dx = {-1, 1, 0, 0};",
			"vector<int> dy = {0, 0, -1, 1};",
			"const int inf = 0x3f3f3f3f;",
			"int n, m;",
			"// Fill these!",
			"bool isValid(int i, int j) {return i>=0 && i<n && j>=0 && j<n;}",
			"int modpow(int a, int b, int mod) {",
			"\tif(a == 0) return 0;",
			"\telse if(a == 1 || b == 0) return 1;",
			"\tint x = modpow(a, b/2, mod);",
			"\tif(b % 2 == 0) {",
			"\t\tx = (x*x)%mod;",
			"\t}else {",
			"\t\tx = (x*x)%mod;",
			"\t\tx = (x*a)%mod;",
			"\t}",
			"\treturn x;",
			"}",
			"int32_t main(){",
			"\t//fastIO",
			"\t/*freopen(\"input.txt\", \"r\", stdin);",
			"\tfreopen(\"output.txt\", \"w\", stdout);*/",
			"\tint t; cin>>t;",
			"\twhile(t--){",
			"\t\t$1",
			"\t}",
			"\treturn 0;",
			"}"
		]
	},
	"boilerplate-usaco": {
		"prefix": "boilerplate-usaco",
		"body": [
			"$BLOCK_COMMENT_START",
			"ID: vineeth13",
			"TASK: $CLIPBOARD",
			"LANG: C++",
			"$BLOCK_COMMENT_END",
			"#include<bits/stdc++.h>",
			"#define int long long",
			"using namespace std;",
			"#define PII pair<int, int>",
			"#define pub push_back",
			"#define puf push_front",
			"#define F first",
			"#define S second",
			"#define ld long double",
			"#define fastIO ios::sync_with_stdio(0); cin.tie(0);",
			"vector<int> dx = {-1, 1, 0, 0};",
			"vector<int> dy = {0, 0, -1, 1};",
			"int n, m;",
			"// Fill these!",
			"bool isValid(int i, int j) {return i>=0 && i<n && j>=0 && j<n;}",
			"const int inf = 0x3f3f3f3f;",
			"int modpow(int a, int b, int mod) {",
			"\tif(a == 0) return 0;",
			"\telse if(a == 1 || b == 0) return 1;",
			"\tint x = modpow(a, b/2, mod);",
			"\tif(b % 2 == 0) {",
			"\t\tx = (x*x)%mod;",
			"\t}else {",
			"\t\tx = (x*x)%mod;",
			"\t\tx = (x*a)%mod;",
			"\t}",
			"\treturn x;",
			"}",
			"int32_t main(){",
			"\t$LINE_COMMENT fastIO",
			"\tfreopen(\"$CLIPBOARD.in\", \"r\", stdin);",
			"\tfreopen(\"$CLIPBOARD.out\", \"w\", stdout);",
			"\t$1",
			"\treturn 0;",
			"}"
		],
		"description": "Boilerplate code to avoid redundancy"
	},
	"random generator": {
		"prefix": "random gen",
		"body": [
			"mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n",
			"int getRand(int l, int r)",
			"{",
			"\tuniform_int_distribution<int> uid(l, r);",
			"\treturn uid(rng);",
			"}"
		],
		"description": "Generates a random number between l and r"
	},
	"DSU": {
		"prefix": "DSU snippet",
		"body": [
			"class DSU{\n  private:\n  int connected;\n  vector<int> parent, sz;\n  public:\n  DSU(int n) {\n    parent, sz = vector<int>(n+1, 0);\n    for(int i = 1; i<=n; i++) {\n      parent[i] = i; sz[i] = 1;\n    }\n    connected = n;\n  }\n\n  int getParent(int i) {\n    while(i != parent[i]) {\n      parent[i] = parent[parent[i]];\n      i = parent[i];\n    }\n    return i;\n  }\n\n  int getSize(int i) {\n    return sz[getParent(i)];\n  }\n\n  void unite(int i, int j) {\n    int par1 = getParent(i), par2 = getParent(j);\n    if(i == j) return;\n    connected--;\n\n    if(sz[par1] > sz[par2]) swap(par1, par2);\n    sz[par2] += sz[par1];\n    sz[par1] = 0;\n    parent[par1] = par2;\n  }\n\n};"
		]
	},
	"TreeNode": {
		"prefix": "TreeNode snippet",
		"body": [
			"struct TreeNode{\r\n\tint data; \r\n\tstruct TreeNode* left; \r\n\tstruct TreeNode* right;\r\n};\r\n"
		]
	},
	"unordered graph": {
		"prefix": "unordered graph",
		"body": [
			"int n, m; cin>>n>>m;",
			"vector<vector<int>> adj_list(n);",
			"for(int i = 0; i<m; i++) {",
			"\tint a, b; cin>>a>>b; a--; b--;",
			"\tadj_list[a].push_back(b);",
			"\tadj_list[b].push_back(a);",
			"}"
		]
	}
}